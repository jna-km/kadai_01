openapi: 3.0.3
info:
  title: 予約くん API仕様書
  version: 1.0.0
  description: Laravel + React による予約管理システム「予約くん」のAPI仕様書です。

servers:
  - url: http://localhost:88/api
    description: ローカル開発環境（テスト用ポート88）

security:
  - bearerAuth: []  # API全体で認証を必須にする
paths:
  /login:
    post:
      summary: ログイン処理
      tags:
        - 認証
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ログイン成功（アクセストークンを返却）
        '401':
          description: 認証失敗（メールアドレスまたはパスワードが不正）

  /operator/login:
    post:
      summary: オペレーター用ログイン処理
      tags:
        - 認証
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorLoginRequest'
      responses:
        '200':
          description: ログイン成功（アクセストークンを返却）
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: xxxxx.yyyyy.zzzzz
                  token_type:
                    type: string
                    example: bearer
                  expires_in:
                    type: integer
                    example: 3600
        '401':
          description: 認証失敗（メールアドレスまたはパスワードが不正}

  /reservations:
    get:
      summary: 予約一覧の取得
      tags:
        - 予約
      responses:
        '200':
          description: 予約一覧を取得しました
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'

    post:
      summary: 新規予約の作成
      tags:
        - 予約
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreateRequest'
      responses:
        '201':
          description: 予約を作成しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '422':
          description: バリデーションエラー

  /reservations/{id}:
    get:
      summary: 予約詳細の取得
      tags:
        - 予約
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 予約情報を取得しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'

    put:
      summary: 予約情報の更新
      tags:
        - 予約
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationUpdateRequest'
      responses:
        '200':
          description: 予約を更新しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '422':
          description: バリデーションエラー

    delete:
      summary: 予約の削除
      tags:
        - 予約
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 削除成功

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "ログインAPIで取得したアクセストークンを 'Bearer ' に続けて入力してください。例: 'Bearer 1|xxxxxxxx'"
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: password
      required:
        - email
        - password
    OperatorLoginRequest:
      type: object
      properties:
        email:
          type: string
          example: admin@example.com
        password:
          type: string
          example: password
      required:
        - email
        - password

    Reservation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        operator_id:
          type: integer
          example: 1
        service_name:
          type: string
          example: カウンセリング予約
        duration:
          type: integer
          example: 45
        date:
          type: string
          format: date
          example: 2025-07-11
        start_time:
          type: string
          example: '14:00'
        end_time:
          type: string
          example: '14:45'
        status:
          type: string
          example: reserved
        notes:
          type: string
          example: 初回面談です

    ReservationCreateRequest:
      type: object
      required:
        - user_id
        - operator_id
        - service_name
        - duration
        - date
        - start_time
        - end_time
      properties:
        user_id:
          type: integer
        operator_id:
          type: integer
        service_name:
          type: string
        duration:
          type: integer
        date:
          type: string
          format: date
        start_time:
          type: string
        end_time:
          type: string
        status:
          type: string
        notes:
          type: string

    ReservationUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/ReservationCreateRequest'
